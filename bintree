class Node:
    def __init__(self, data):
        self.data = data
        self. left = self.right = None


class Tree:
    def __init__(self):
        self.root = None

    def __find(self, node, parent, value):
        if node is None:
            return None, parent, False

        if value == node.data:
            return node, parent, True

        if value < node.data:
            if node.left:
                return self.__find(node.left, node, value)

        if value > node.data:
            if node.right:
                return self.__find(node.right, node, value)

        return node, parent, False

    def append(self, obj):
        if self.root is None:
            self.root = obj
            return obj
        s, p, fl_find = self.__find(self.root, None, obj.data)

        if not fl_find and s:
            if obj.data < s.data:
                s.left = obj
            else:
                s.right = obj

        return obj

    def show_tree(self, node):
        if node is None:
            return

        self.show_tree(node.left)
        print(node.data)
        self.show_tree(node.right)

    def wide_tree(self, node):
        if node is None:
            return

        v = [node]      #вершины текущего уровня
        while v:
            vn = []
            for x in v:
                print(x.data, end=" ")
                if x.left:
                    vn += [x.left]
                if x.left:
                    vn += [x.right]
            print()
            v = vn

    def el_wind_tree(self, node, wide, el):
        if node is None:
            return

        v = [node]      #вершины текущего уровня
        k = 0
        while v:
            k += 1
            vn = []     #вершины след уровня
            for x in v:
                if wide == 1:
                    print(x.data)
                    if el == x.data:
                        return True
                    else:
                        return False
                if x.left:
                    vn += [x.left]
                if x.left:
                    vn += [x.right]
            if k == wide - 1:
                flag = False
                for i in vn:
                    print(i.data, end=" ")
                    if i.data == el:
                        flag = True
                print()
                print(flag)
            v = vn


v = [10, 5, 8, 16, 13, 2, 20, 21, 19, 1, 3, 7, 9, 12, 14]

t = Tree()
for x in v:
    t.append(Node(x))

#t.show_tree(t.root)
t.wide_tree(t.root)
t.el_wind_tree(t.root, 4, 12)
